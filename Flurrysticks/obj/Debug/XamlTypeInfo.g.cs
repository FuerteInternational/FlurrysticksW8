//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Flurrystics
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Flurrysticks.Flurrystics_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_LayoutAwarePage() { return new global::Flurrystics.Common.LayoutAwarePage(); }

        private object Activate_1_RadDatePicker() { return new global::Telerik.UI.Xaml.Controls.Input.RadDatePicker(); }

        private object Activate_10_RadCartesianChart() { return new global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart(); }

        private object Activate_15_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>(); }

        private object Activate_23_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.DataTemplate>(); }

        private object Activate_24_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.DataTemplate>(); }

        private object Activate_25_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>(); }

        private object Activate_26_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>(); }

        private object Activate_27_ChartSeriesLabelDefinition() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition(); }

        private object Activate_32_CartesianChartGrid() { return new global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid(); }

        private object Activate_34_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>(); }

        private object Activate_38_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>(); }

        private object Activate_42_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.Charting.CategoricalDataPoint>(); }

        private object Activate_43_CategoricalDataPoint() { return new global::Telerik.Charting.CategoricalDataPoint(); }

        private object Activate_53_ChartSeriesProvider() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider(); }

        private object Activate_54_ChartPalette() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartPalette(); }

        private object Activate_58_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.Media.Brush>(); }

        private object Activate_59_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.Media.Brush>(); }

        private object Activate_60_DateTimeCategoricalAxis() { return new global::Telerik.UI.Xaml.Controls.Chart.DateTimeCategoricalAxis(); }

        private object Activate_61_CategoricalAxis() { return new global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis(); }

        private object Activate_69_LinearAxis() { return new global::Telerik.UI.Xaml.Controls.Chart.LinearAxis(); }

        private object Activate_73_LineSeries() { return new global::Telerik.UI.Xaml.Controls.Chart.LineSeries(); }

        private object Activate_77_ChartTrackBallBehavior() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior(); }

        private object Activate_80_PropertyNameDataPointBinding() { return new global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding(); }

        private object Activate_81_ChartPanAndZoomBehavior() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior(); }

        private object Activate_83_RadCustomHubTile() { return new global::Telerik.UI.Xaml.Controls.Primitives.RadCustomHubTile(); }

        private object Activate_88_AppMetrics() { return new global::Flurrystics.AppMetrics(); }

        private object Activate_89_AccountApplicationsPage() { return new global::Flurrystics.AccountApplicationsPage(); }

        private void VectorAdd_13_CartesianSeriesCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)item;
            collection.Add(newItem);
        }

        private void VectorAdd_14_PresenterCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)item;
            collection.Add(newItem);
        }

        private void VectorAdd_15_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)item;
            collection.Add(newItem);
        }

        private void VectorAdd_23_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DataTemplate>)instance;
            var newItem = (global::Windows.UI.Xaml.DataTemplate)item;
            collection.Add(newItem);
        }

        private void VectorAdd_24_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DataTemplate>)instance;
            var newItem = (global::Windows.UI.Xaml.DataTemplate)item;
            collection.Add(newItem);
        }

        private void VectorAdd_25_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)item;
            collection.Add(newItem);
        }

        private void VectorAdd_26_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)item;
            collection.Add(newItem);
        }

        private void VectorAdd_33_ChartBehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior)item;
            collection.Add(newItem);
        }

        private void VectorAdd_34_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior)item;
            collection.Add(newItem);
        }

        private void VectorAdd_36_IndicatorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_37_PresenterCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_38_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)item;
            collection.Add(newItem);
        }

        private void VectorAdd_40_DataPointCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.Charting.CategoricalDataPoint>)instance;
            var newItem = (global::Telerik.Charting.CategoricalDataPoint)item;
            collection.Add(newItem);
        }

        private void VectorAdd_41_ElementCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.Charting.CategoricalDataPoint>)instance;
            var newItem = (global::Telerik.Charting.CategoricalDataPoint)item;
            collection.Add(newItem);
        }

        private void VectorAdd_42_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.Charting.CategoricalDataPoint>)instance;
            var newItem = (global::Telerik.Charting.CategoricalDataPoint)item;
            collection.Add(newItem);
        }

        private void VectorAdd_58_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Brush>)instance;
            var newItem = (global::Windows.UI.Xaml.Media.Brush)item;
            collection.Add(newItem);
        }

        private void VectorAdd_59_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Brush>)instance;
            var newItem = (global::Windows.UI.Xaml.Media.Brush)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Object":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Double":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "String":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Boolean":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DataTemplate));
                break;

            case "Windows.UI.Xaml.Style":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Style));
                break;

            case "Int32":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.Controls.DataTemplateSelector":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DependencyObject));
                break;

            case "Windows.UI.Xaml.Thickness":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Thickness));
                break;

            case "Windows.UI.Xaml.HorizontalAlignment":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.HorizontalAlignment));
                break;

            case "Windows.UI.Xaml.VerticalAlignment":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.VerticalAlignment));
                break;

            case "Windows.UI.Xaml.FrameworkElement":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.FrameworkElement));
                break;

            case "Windows.Foundation.Size":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.Foundation.Size));
                break;

            case "Windows.Foundation.Point":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.Foundation.Point));
                break;

            case "Windows.UI.Xaml.Media.Brush":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Brush));
                break;

            case "Windows.UI.Xaml.Media.DoubleCollection":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.DoubleCollection));
                break;

            case "Windows.UI.Xaml.Media.PenLineJoin":
                xamlType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.PenLineJoin));
                break;

            case "Flurrystics.Common.LayoutAwarePage":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Flurrystics.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_LayoutAwarePage;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.RadDatePicker":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.RadDatePicker), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker"));
                userType.Activator = Activate_1_RadDatePicker;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.DateTimePicker), GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl"));
                userType.AddMemberName("ItemLength");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("DisplayValueFormat");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Value");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("AutoSizeWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsReadOnly");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("EmptyContent");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("EmptyContentTemplate");
                userType.AddMemberName("ValueString");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("MaxValue");
                userType.AddMemberName("MinValue");
                userType.AddMemberName("SelectorBackgroundStyle");
                userType.AddMemberName("ItemSpacing");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("SelectorFormat");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsOpen");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("SelectorDefaultValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                userType.AddMemberName("SelectorHeader");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("SelectorHeaderTemplate");
                userType.AddMemberName("ItemCount");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.RadHeaderedControl":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.RadHeaderedControl), GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("HeaderStyle");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.RadControl":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.RadControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("CurrentVisualState");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "System.Nullable<System.DateTime>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Nullable<global::System.DateTime>), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.DateTimePickerDisplayMode":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.DateTimePickerDisplayMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Standard", global::Telerik.UI.Xaml.Controls.Input.DateTimePickerDisplayMode.Standard);
                userType.AddEnumValue("Inline", global::Telerik.UI.Xaml.Controls.Input.DateTimePickerDisplayMode.Inline);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.DateTime":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.DateTime), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase"));
                userType.Activator = Activate_10_RadCartesianChart;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Series");
                userType.AddMemberName("Series");
                userType.AddMemberName("Grid");
                userType.AddMemberName("HorizontalAxis");
                userType.AddMemberName("VerticalAxis");
                userType.AddMemberName("Indicators");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.RadChartBase), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterBase"));
                userType.AddMemberName("MinZoom");
                userType.AddMemberName("EmptyContent");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("Behaviors");
                userType.AddMemberName("Zoom");
                userType.AddMemberName("MaxZoom");
                userType.AddMemberName("PlotOrigin");
                userType.AddMemberName("PlotAreaClip");
                userType.AddMemberName("ScrollOffset");
                userType.AddMemberName("SeriesProvider");
                userType.AddMemberName("ClipToBounds");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("EmptyContentTemplate");
                userType.AddMemberName("PlotAreaStyle");
                userType.AddMemberName("Palette");
                userType.AddMemberName("PaletteName");
                userType.AddMemberName("SelectionPalette");
                userType.AddMemberName("SelectionPaletteName");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.PresenterBase":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterBase), GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                userType.AddMemberName("VisualDesiredSize");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.CartesianSeriesCollection":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianSeriesCollection), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterCollection<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>"));
                userType.CollectionAdd = VectorAdd_13_CartesianSeriesCollection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.PresenterCollection<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterCollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>"));
                AddToMapOfTypeToStandardName(typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterCollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>),
                                                   "Telerik.UI.Xaml.Controls.Chart.PresenterCollection<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>");
                userType.CollectionAdd = VectorAdd_14_PresenterCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>),
                                                   "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>");
                userType.Activator = Activate_15_Collection;
                userType.CollectionAdd = VectorAdd_15_Collection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.CartesianSeries":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries"));
                userType.AddMemberName("HorizontalAxis");
                userType.AddMemberName("VerticalAxis");
                userType.AddMemberName("LegendTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsVisibleInLegend");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries"));
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("PointTemplate");
                userType.AddMemberName("PointTemplateSelector");
                userType.AddMemberName("PointTemplates");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.DataTemplate>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.DataTemplate>");
                userType.AddMemberName("SizeFromStyle");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeries), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter"));
                userType.AddMemberName("IsSelected");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("AllowSelect");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("PaletteIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("LabelDefinitions");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>");
                userType.AddMemberName("IsSelectedBinding");
                userType.AddMemberName("ShowLabels");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("DisplayName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ClipToPlotArea");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ItemsSource");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterBase"));
                userType.AddMemberName("ZIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Chart");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.CartesianAxis":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.LineAxis"));
                userType.AddMemberName("HorizontalLocation");
                userType.AddMemberName("VerticalLocation");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.LineAxis":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.LineAxis), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis"));
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.Axis":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.Axis), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter"));
                userType.AddMemberName("LabelFitMode");
                userType.AddMemberName("LabelInterval");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("LabelFormatter");
                userType.AddMemberName("LabelRotationAngle");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("LineStyle");
                userType.AddMemberName("LastLabelVisibility");
                userType.AddMemberName("LabelFormat");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("MajorTickOffset");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("LabelOffset");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("ShowLabels");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Title");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("LabelTemplate");
                userType.AddMemberName("LabelTemplateSelector");
                userType.AddMemberName("LabelStyle");
                userType.AddMemberName("TitleTemplate");
                userType.AddMemberName("MajorTickTemplate");
                userType.AddMemberName("MajorTickStyle");
                userType.AddMemberName("TickThickness");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.DataTemplate>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.DataTemplate>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Windows.UI.Xaml.DataTemplate>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.DataTemplate>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.DataTemplate>");
                userType.Activator = Activate_23_ObservableCollection;
                userType.CollectionAdd = VectorAdd_23_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Windows.UI.Xaml.DataTemplate>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.DataTemplate>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.DataTemplate>),
                                                   "System.Collections.ObjectModel.Collection<Windows.UI.Xaml.DataTemplate>");
                userType.Activator = Activate_24_Collection;
                userType.CollectionAdd = VectorAdd_24_Collection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>");
                userType.Activator = Activate_25_ObservableCollection;
                userType.CollectionAdd = VectorAdd_25_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>),
                                                   "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>");
                userType.Activator = Activate_26_Collection;
                userType.CollectionAdd = VectorAdd_26_Collection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_27_ChartSeriesLabelDefinition;
                userType.AddMemberName("Binding");
                userType.AddMemberName("Format");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Margin");
                userType.AddMemberName("HorizontalAlignment");
                userType.AddMemberName("VerticalAlignment");
                userType.AddMemberName("Template");
                userType.AddMemberName("TemplateSelector");
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("Strategy");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.DataPointBinding":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "System.Collections.IEnumerable":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.IEnumerable), null);
                xamlType = userType;
                break;

            case "Telerik.Charting.RadSize":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.RadSize), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter"));
                userType.Activator = Activate_32_CartesianChartGrid;
                userType.AddMemberName("MajorXLinesRenderMode");
                userType.AddMemberName("MajorLinesVisibility");
                userType.AddMemberName("MajorYLinesRenderMode");
                userType.AddMemberName("StripLinesVisibility");
                userType.AddMemberName("XStripeBrushes");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.Media.Brush>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.Media.Brush>");
                userType.AddMemberName("YStripeBrushes");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.Media.Brush>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.Media.Brush>");
                userType.AddMemberName("MajorXLineStyle");
                userType.AddMemberName("MajorYLineStyle");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Chart.ChartBehavior>"));
                userType.CollectionAdd = VectorAdd_33_ChartBehaviorCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Chart.ChartBehavior>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>),
                                                   "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Chart.ChartBehavior>");
                userType.Activator = Activate_34_Collection;
                userType.CollectionAdd = VectorAdd_34_Collection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartBehavior":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("Chart");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.IndicatorCollection":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.IndicatorCollection), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterCollection<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>"));
                userType.CollectionAdd = VectorAdd_36_IndicatorCollection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.PresenterCollection<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterCollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>"));
                AddToMapOfTypeToStandardName(typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterCollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>),
                                                   "Telerik.UI.Xaml.Controls.Chart.PresenterCollection<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>");
                userType.CollectionAdd = VectorAdd_37_PresenterCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>),
                                                   "System.Collections.ObjectModel.Collection<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>");
                userType.Activator = Activate_38_Collection;
                userType.CollectionAdd = VectorAdd_38_Collection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.IndicatorBase":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries"));
                userType.AddMemberName("DataPoints");
                AddToMapOfTypeToStandardName(typeof(global::Telerik.Charting.DataPointCollection<global::Telerik.Charting.CategoricalDataPoint>),
                                                   "Telerik.Charting.DataPointCollection<Telerik.Charting.CategoricalDataPoint>");
                userType.AddMemberName("CategoryBinding");
                xamlType = userType;
                break;

            case "Telerik.Charting.DataPointCollection<Telerik.Charting.CategoricalDataPoint>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.DataPointCollection<global::Telerik.Charting.CategoricalDataPoint>), GetXamlTypeByName("Telerik.Charting.ElementCollection<Telerik.Charting.CategoricalDataPoint>"));
                AddToMapOfTypeToStandardName(typeof(global::Telerik.Charting.DataPointCollection<global::Telerik.Charting.CategoricalDataPoint>),
                                                   "Telerik.Charting.DataPointCollection<Telerik.Charting.CategoricalDataPoint>");
                userType.CollectionAdd = VectorAdd_40_DataPointCollection;
                xamlType = userType;
                break;

            case "Telerik.Charting.ElementCollection<Telerik.Charting.CategoricalDataPoint>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.ElementCollection<global::Telerik.Charting.CategoricalDataPoint>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Telerik.Charting.CategoricalDataPoint>"));
                AddToMapOfTypeToStandardName(typeof(global::Telerik.Charting.ElementCollection<global::Telerik.Charting.CategoricalDataPoint>),
                                                   "Telerik.Charting.ElementCollection<Telerik.Charting.CategoricalDataPoint>");
                userType.CollectionAdd = VectorAdd_41_ElementCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Telerik.Charting.CategoricalDataPoint>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.Charting.CategoricalDataPoint>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.Charting.CategoricalDataPoint>),
                                                   "System.Collections.ObjectModel.Collection<Telerik.Charting.CategoricalDataPoint>");
                userType.Activator = Activate_42_Collection;
                userType.CollectionAdd = VectorAdd_42_Collection;
                xamlType = userType;
                break;

            case "Telerik.Charting.CategoricalDataPoint":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.CategoricalDataPoint), GetXamlTypeByName("Telerik.Charting.CategoricalDataPointBase"));
                userType.Activator = Activate_43_CategoricalDataPoint;
                userType.AddMemberName("Value");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "Telerik.Charting.CategoricalDataPointBase":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.CategoricalDataPointBase), GetXamlTypeByName("Telerik.Charting.DataPoint"));
                userType.AddMemberName("Category");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "Telerik.Charting.DataPoint":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.DataPoint), GetXamlTypeByName("Telerik.Charting.ChartNode"));
                userType.AddMemberName("Label");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("DataItem");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("IsSelected");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "Telerik.Charting.ChartNode":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.ChartNode), GetXamlTypeByName("Telerik.Charting.PropertyBagObject"));
                userType.AddMemberName("IsArrangeValid");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("NodeState");
                userType.AddMemberName("Index");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("CollectionIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("IsTreeLoaded");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("LayoutSlot");
                userType.AddMemberName("Parent");
                userType.AddMemberName("Presenter");
                xamlType = userType;
                break;

            case "Telerik.Charting.PropertyBagObject":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.PropertyBagObject), GetXamlTypeByName("Telerik.Charting.DisposableObject"));
                xamlType = userType;
                break;

            case "Telerik.Charting.DisposableObject":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.DisposableObject), GetXamlTypeByName("Object"));
                userType.AddMemberName("IsDisposing");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsDisposed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "Telerik.Charting.NodeState":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.NodeState), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Initial", global::Telerik.Charting.NodeState.Initial);
                userType.AddEnumValue("Loading", global::Telerik.Charting.NodeState.Loading);
                userType.AddEnumValue("Loaded", global::Telerik.Charting.NodeState.Loaded);
                userType.AddEnumValue("Unloading", global::Telerik.Charting.NodeState.Unloading);
                userType.AddEnumValue("Unloaded", global::Telerik.Charting.NodeState.Unloaded);
                xamlType = userType;
                break;

            case "Telerik.Charting.RadRect":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.RadRect), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "Telerik.Charting.ChartElement":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.ChartElement), GetXamlTypeByName("Telerik.Charting.ChartNode"));
                xamlType = userType;
                break;

            case "Telerik.Charting.IChartElementPresenter":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.IChartElementPresenter), null);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_53_ChartSeriesProvider;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartPalette), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_54_ChartPalette;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.None);
                userType.AddEnumValue("DefaultDark", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultDark);
                userType.AddEnumValue("DefaultLight", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultLight);
                userType.AddEnumValue("DefaultDarkSelected", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultDarkSelected);
                userType.AddEnumValue("DefaultLightSelected", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultLightSelected);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("First", global::Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode.First);
                userType.AddEnumValue("Inner", global::Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode.Inner);
                userType.AddEnumValue("FirstAndInner", global::Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode.FirstAndInner);
                userType.AddEnumValue("Last", global::Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode.Last);
                userType.AddEnumValue("FirstAndLast", global::Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode.FirstAndLast);
                userType.AddEnumValue("InnerAndLast", global::Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode.InnerAndLast);
                userType.AddEnumValue("All", global::Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode.All);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.GridLineVisibility":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.GridLineVisibility), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Chart.GridLineVisibility.None);
                userType.AddEnumValue("X", global::Telerik.UI.Xaml.Controls.Chart.GridLineVisibility.X);
                userType.AddEnumValue("Y", global::Telerik.UI.Xaml.Controls.Chart.GridLineVisibility.Y);
                userType.AddEnumValue("XY", global::Telerik.UI.Xaml.Controls.Chart.GridLineVisibility.XY);
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.Media.Brush>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.Media.Brush>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Windows.UI.Xaml.Media.Brush>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.Media.Brush>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.Media.Brush>");
                userType.Activator = Activate_58_ObservableCollection;
                userType.CollectionAdd = VectorAdd_58_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Windows.UI.Xaml.Media.Brush>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.Media.Brush>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.Media.Brush>),
                                                   "System.Collections.ObjectModel.Collection<Windows.UI.Xaml.Media.Brush>");
                userType.Activator = Activate_59_Collection;
                userType.CollectionAdd = VectorAdd_59_Collection;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.DateTimeCategoricalAxis":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.DateTimeCategoricalAxis), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis"));
                userType.Activator = Activate_60_DateTimeCategoricalAxis;
                userType.AddMemberName("DateTimeComponent");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianAxis"));
                userType.Activator = Activate_61_CategoricalAxis;
                userType.AddMemberName("AutoGroup");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("MajorTickInterval");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("PlotMode");
                userType.AddMemberName("GapLength");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "Telerik.Charting.AxisLabelFitMode":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.AxisLabelFitMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.Charting.AxisLabelFitMode.None);
                userType.AddEnumValue("MultiLine", global::Telerik.Charting.AxisLabelFitMode.MultiLine);
                userType.AddEnumValue("Rotate", global::Telerik.Charting.AxisLabelFitMode.Rotate);
                xamlType = userType;
                break;

            case "Telerik.Charting.DateTimeComponent":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.DateTimeComponent), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Ticks", global::Telerik.Charting.DateTimeComponent.Ticks);
                userType.AddEnumValue("Year", global::Telerik.Charting.DateTimeComponent.Year);
                userType.AddEnumValue("Quarter", global::Telerik.Charting.DateTimeComponent.Quarter);
                userType.AddEnumValue("Month", global::Telerik.Charting.DateTimeComponent.Month);
                userType.AddEnumValue("Week", global::Telerik.Charting.DateTimeComponent.Week);
                userType.AddEnumValue("Hour", global::Telerik.Charting.DateTimeComponent.Hour);
                userType.AddEnumValue("Minute", global::Telerik.Charting.DateTimeComponent.Minute);
                userType.AddEnumValue("Second", global::Telerik.Charting.DateTimeComponent.Second);
                userType.AddEnumValue("Millisecond", global::Telerik.Charting.DateTimeComponent.Millisecond);
                userType.AddEnumValue("Date", global::Telerik.Charting.DateTimeComponent.Date);
                userType.AddEnumValue("TimeOfDay", global::Telerik.Charting.DateTimeComponent.TimeOfDay);
                userType.AddEnumValue("Day", global::Telerik.Charting.DateTimeComponent.Day);
                userType.AddEnumValue("DayOfWeek", global::Telerik.Charting.DateTimeComponent.DayOfWeek);
                userType.AddEnumValue("DayOfYear", global::Telerik.Charting.DateTimeComponent.DayOfYear);
                xamlType = userType;
                break;

            case "Telerik.Charting.AxisPlotMode":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.AxisPlotMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("BetweenTicks", global::Telerik.Charting.AxisPlotMode.BetweenTicks);
                userType.AddEnumValue("OnTicks", global::Telerik.Charting.AxisPlotMode.OnTicks);
                userType.AddEnumValue("OnTicksPadded", global::Telerik.Charting.AxisPlotMode.OnTicksPadded);
                xamlType = userType;
                break;

            case "Telerik.Charting.AxisHorizontalLocation":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.AxisHorizontalLocation), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Left", global::Telerik.Charting.AxisHorizontalLocation.Left);
                userType.AddEnumValue("Right", global::Telerik.Charting.AxisHorizontalLocation.Right);
                xamlType = userType;
                break;

            case "Telerik.Charting.AxisVerticalLocation":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.AxisVerticalLocation), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Bottom", global::Telerik.Charting.AxisVerticalLocation.Bottom);
                userType.AddEnumValue("Top", global::Telerik.Charting.AxisVerticalLocation.Top);
                xamlType = userType;
                break;

            case "Telerik.Charting.IContentFormatter":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.IContentFormatter), null);
                xamlType = userType;
                break;

            case "Telerik.Charting.AxisLastLabelVisibility":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.AxisLastLabelVisibility), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Visible", global::Telerik.Charting.AxisLastLabelVisibility.Visible);
                userType.AddEnumValue("Hidden", global::Telerik.Charting.AxisLastLabelVisibility.Hidden);
                userType.AddEnumValue("Clip", global::Telerik.Charting.AxisLastLabelVisibility.Clip);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.LinearAxis":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.LinearAxis), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis"));
                userType.Activator = Activate_69_LinearAxis;
                userType.AddMemberName("MajorStep");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianAxis"));
                userType.AddMemberName("Minimum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Maximum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("RangeExtendDirection");
                userType.AddMemberName("DesiredTickCount");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("ActualRange");
                AddToMapOfTypeToStandardName(typeof(global::Telerik.Charting.ValueRange<global::System.Double>),
                                                   "Telerik.Charting.ValueRange<Double>");
                xamlType = userType;
                break;

            case "Telerik.Charting.NumericalAxisRangeExtendDirection":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.NumericalAxisRangeExtendDirection), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.Charting.NumericalAxisRangeExtendDirection.None);
                userType.AddEnumValue("Positive", global::Telerik.Charting.NumericalAxisRangeExtendDirection.Positive);
                userType.AddEnumValue("Negative", global::Telerik.Charting.NumericalAxisRangeExtendDirection.Negative);
                userType.AddEnumValue("Both", global::Telerik.Charting.NumericalAxisRangeExtendDirection.Both);
                xamlType = userType;
                break;

            case "Telerik.Charting.ValueRange<Double>":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.ValueRange<global::System.Double>), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::Telerik.Charting.ValueRange<global::System.Double>),
                                                   "Telerik.Charting.ValueRange<Double>");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.LineSeries":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.LineSeries), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries"));
                userType.Activator = Activate_73_LineSeries;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.LineSeries.DataPoints");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries"));
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries.DataPoints");
                userType.AddMemberName("Stroke");
                userType.AddMemberName("StrokeThickness");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("StrokeDashArray");
                userType.AddMemberName("StrokeLineJoin");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeries":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianSeries"));
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries.DataPoints");
                userType.AddMemberName("DataPoints");
                AddToMapOfTypeToStandardName(typeof(global::Telerik.Charting.DataPointCollection<global::Telerik.Charting.CategoricalDataPoint>),
                                                   "Telerik.Charting.DataPointCollection<Telerik.Charting.CategoricalDataPoint>");
                userType.AddMemberName("ValueBinding");
                userType.AddMemberName("CategoryBinding");
                userType.AddMemberName("CombineMode");
                userType.AddMemberName("StackGroupKey");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "Telerik.Charting.ChartSeriesCombineMode":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.Charting.ChartSeriesCombineMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.Charting.ChartSeriesCombineMode.None);
                userType.AddEnumValue("Cluster", global::Telerik.Charting.ChartSeriesCombineMode.Cluster);
                userType.AddEnumValue("Stack", global::Telerik.Charting.ChartSeriesCombineMode.Stack);
                userType.AddEnumValue("Stack100", global::Telerik.Charting.ChartSeriesCombineMode.Stack100);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartBehavior"));
                userType.Activator = Activate_77_ChartTrackBallBehavior;
                userType.AddMemberName("ShowIntersectionPoints");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("InfoMode");
                userType.AddMemberName("ShowInfo");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("LineStyle");
                userType.AddMemberName("InfoStyle");
                userType.AddMemberName("SnapMode");
                userType.AddMemberName("TrackInfoTemplate");
                userType.AddMemberName("IntersectionTemplate");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.TrackInfoMode":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.TrackInfoMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Multiple", global::Telerik.UI.Xaml.Controls.Chart.TrackInfoMode.Multiple);
                userType.AddEnumValue("Individual", global::Telerik.UI.Xaml.Controls.Chart.TrackInfoMode.Individual);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.TrackBallSnapMode":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.TrackBallSnapMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Chart.TrackBallSnapMode.None);
                userType.AddEnumValue("ClosestPoint", global::Telerik.UI.Xaml.Controls.Chart.TrackBallSnapMode.ClosestPoint);
                userType.AddEnumValue("AllClosePoints", global::Telerik.UI.Xaml.Controls.Chart.TrackBallSnapMode.AllClosePoints);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.DataPointBinding"));
                userType.Activator = Activate_80_PropertyNameDataPointBinding;
                userType.AddMemberName("PropertyName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartBehavior"));
                userType.Activator = Activate_81_ChartPanAndZoomBehavior;
                userType.AddMemberName("PanMode");
                userType.AddMemberName("ZoomMode");
                userType.AddMemberName("HandleDoubleTap");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartPanZoomMode":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartPanZoomMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Chart.ChartPanZoomMode.None);
                userType.AddEnumValue("Horizontal", global::Telerik.UI.Xaml.Controls.Chart.ChartPanZoomMode.Horizontal);
                userType.AddEnumValue("Vertical", global::Telerik.UI.Xaml.Controls.Chart.ChartPanZoomMode.Vertical);
                userType.AddEnumValue("Both", global::Telerik.UI.Xaml.Controls.Chart.ChartPanZoomMode.Both);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Primitives.RadCustomHubTile":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Primitives.RadCustomHubTile), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.HubTileBase"));
                userType.Activator = Activate_83_RadCustomHubTile;
                userType.AddMemberName("FrontContent");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("FrontContentTemplate");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Primitives.HubTileBase":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase), GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                userType.AddMemberName("UpdateInterval");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("BackContent");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("IsFlipped");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("Title");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("TitleTemplate");
                userType.AddMemberName("IsFrozen");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("BackContentTemplate");
                xamlType = userType;
                break;

            case "TimeSpan":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.TimeSpan), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                xamlType = userType;
                break;

            case "System.Windows.Input.ICommand":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Windows.Input.ICommand), null);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Primitives.HubTileService":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Primitives.HubTileService), GetXamlTypeByName("Object"));
                userType.AddMemberName("GroupTag");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Flurrystics.AppMetrics":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Flurrystics.AppMetrics), GetXamlTypeByName("Flurrystics.Common.LayoutAwarePage"));
                userType.Activator = Activate_88_AppMetrics;
                xamlType = userType;
                break;

            case "Flurrystics.AccountApplicationsPage":
                userType = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Flurrystics.AccountApplicationsPage), GetXamlTypeByName("Flurrystics.Common.LayoutAwarePage"));
                userType.Activator = Activate_89_AccountApplicationsPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Callisto.Callisto_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Chart.Chart_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.DataVisualization.DataVisualization_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Input.Input_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Primitives.Primitives_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_RadHeaderedControl_Header(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            return that.Header;
        }
        private void set_0_RadHeaderedControl_Header(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_1_DateTimePicker_ItemLength(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.ItemLength;
        }
        private void set_1_DateTimePicker_ItemLength(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.ItemLength = (global::System.Double)Value;
        }
        private object get_2_DateTimePicker_DisplayValueFormat(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.DisplayValueFormat;
        }
        private void set_2_DateTimePicker_DisplayValueFormat(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.DisplayValueFormat = (global::System.String)Value;
        }
        private object get_3_DateTimePicker_Value(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.Value;
        }
        private void set_3_DateTimePicker_Value(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.Value = (global::System.Nullable<global::System.DateTime>)Value;
        }
        private object get_4_DateTimePicker_DisplayMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.DisplayMode;
        }
        private void set_4_DateTimePicker_DisplayMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.DisplayMode = (global::Telerik.UI.Xaml.Controls.Input.DateTimePickerDisplayMode)Value;
        }
        private object get_5_DateTimePicker_AutoSizeWidth(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.AutoSizeWidth;
        }
        private void set_5_DateTimePicker_AutoSizeWidth(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.AutoSizeWidth = (global::System.Boolean)Value;
        }
        private object get_6_DateTimePicker_IsReadOnly(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.IsReadOnly;
        }
        private void set_6_DateTimePicker_IsReadOnly(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.IsReadOnly = (global::System.Boolean)Value;
        }
        private object get_7_DateTimePicker_EmptyContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.EmptyContent;
        }
        private void set_7_DateTimePicker_EmptyContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.EmptyContent = (global::System.Object)Value;
        }
        private object get_8_DateTimePicker_EmptyContentTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.EmptyContentTemplate;
        }
        private void set_8_DateTimePicker_EmptyContentTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.EmptyContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_9_DateTimePicker_ValueString(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.ValueString;
        }
        private object get_10_DateTimePicker_MaxValue(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.MaxValue;
        }
        private void set_10_DateTimePicker_MaxValue(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.MaxValue = (global::System.DateTime)Value;
        }
        private object get_11_DateTimePicker_MinValue(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.MinValue;
        }
        private void set_11_DateTimePicker_MinValue(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.MinValue = (global::System.DateTime)Value;
        }
        private object get_12_DateTimePicker_SelectorBackgroundStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorBackgroundStyle;
        }
        private void set_12_DateTimePicker_SelectorBackgroundStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorBackgroundStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_13_DateTimePicker_ItemSpacing(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.ItemSpacing;
        }
        private void set_13_DateTimePicker_ItemSpacing(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.ItemSpacing = (global::System.Double)Value;
        }
        private object get_14_DateTimePicker_SelectorFormat(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorFormat;
        }
        private void set_14_DateTimePicker_SelectorFormat(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorFormat = (global::System.String)Value;
        }
        private object get_15_DateTimePicker_IsOpen(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.IsOpen;
        }
        private void set_15_DateTimePicker_IsOpen(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_16_DateTimePicker_SelectorDefaultValue(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorDefaultValue;
        }
        private void set_16_DateTimePicker_SelectorDefaultValue(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorDefaultValue = (global::System.Nullable<global::System.DateTime>)Value;
        }
        private object get_17_DateTimePicker_SelectorHeader(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorHeader;
        }
        private void set_17_DateTimePicker_SelectorHeader(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorHeader = (global::System.Object)Value;
        }
        private object get_18_DateTimePicker_SelectorHeaderTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorHeaderTemplate;
        }
        private void set_18_DateTimePicker_SelectorHeaderTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorHeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_19_DateTimePicker_ItemCount(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.ItemCount;
        }
        private void set_19_DateTimePicker_ItemCount(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.ItemCount = (global::System.Int32)Value;
        }
        private object get_20_RadHeaderedControl_HeaderTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            return that.HeaderTemplate;
        }
        private void set_20_RadHeaderedControl_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_21_RadHeaderedControl_HeaderStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            return that.HeaderStyle;
        }
        private void set_21_RadHeaderedControl_HeaderStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            that.HeaderStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_22_RadControl_CurrentVisualState(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadControl)instance;
            return that.CurrentVisualState;
        }
        private object get_23_RadCartesianChart_Series(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.Series;
        }
        private object get_24_CartesianSeries_HorizontalAxis(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            return that.HorizontalAxis;
        }
        private void set_24_CartesianSeries_HorizontalAxis(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            that.HorizontalAxis = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)Value;
        }
        private object get_25_CartesianSeries_VerticalAxis(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            return that.VerticalAxis;
        }
        private void set_25_CartesianSeries_VerticalAxis(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            that.VerticalAxis = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)Value;
        }
        private object get_26_CartesianSeries_LegendTitle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            return that.LegendTitle;
        }
        private void set_26_CartesianSeries_LegendTitle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            that.LegendTitle = (global::System.String)Value;
        }
        private object get_27_CartesianSeries_IsVisibleInLegend(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            return that.IsVisibleInLegend;
        }
        private void set_27_CartesianSeries_IsVisibleInLegend(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            that.IsVisibleInLegend = (global::System.Boolean)Value;
        }
        private object get_28_PointTemplateSeries_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.DefaultVisualStyle;
        }
        private void set_28_PointTemplateSeries_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_29_PointTemplateSeries_PointTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.PointTemplate;
        }
        private void set_29_PointTemplateSeries_PointTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.PointTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_30_PointTemplateSeries_PointTemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.PointTemplateSelector;
        }
        private void set_30_PointTemplateSeries_PointTemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.PointTemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_31_PointTemplateSeries_PointTemplates(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.PointTemplates;
        }
        private object get_32_ChartSeries_IsSelected(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.IsSelected;
        }
        private void set_32_ChartSeries_IsSelected(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_33_ChartSeries_AllowSelect(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.AllowSelect;
        }
        private void set_33_ChartSeries_AllowSelect(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.AllowSelect = (global::System.Boolean)Value;
        }
        private object get_34_ChartSeries_PaletteIndex(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.PaletteIndex;
        }
        private void set_34_ChartSeries_PaletteIndex(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.PaletteIndex = (global::System.Int32)Value;
        }
        private object get_35_ChartSeries_LabelDefinitions(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.LabelDefinitions;
        }
        private object get_36_ChartSeriesLabelDefinition_Binding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Binding;
        }
        private void set_36_ChartSeriesLabelDefinition_Binding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Binding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_37_ChartSeriesLabelDefinition_Format(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Format;
        }
        private void set_37_ChartSeriesLabelDefinition_Format(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Format = (global::System.String)Value;
        }
        private object get_38_ChartSeriesLabelDefinition_Margin(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Margin;
        }
        private void set_38_ChartSeriesLabelDefinition_Margin(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Margin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_39_ChartSeriesLabelDefinition_HorizontalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.HorizontalAlignment;
        }
        private void set_39_ChartSeriesLabelDefinition_HorizontalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.HorizontalAlignment = (global::Windows.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_40_ChartSeriesLabelDefinition_VerticalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.VerticalAlignment;
        }
        private void set_40_ChartSeriesLabelDefinition_VerticalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.VerticalAlignment = (global::Windows.UI.Xaml.VerticalAlignment)Value;
        }
        private object get_41_ChartSeriesLabelDefinition_Template(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Template;
        }
        private void set_41_ChartSeriesLabelDefinition_Template(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Template = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_42_ChartSeriesLabelDefinition_TemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.TemplateSelector;
        }
        private void set_42_ChartSeriesLabelDefinition_TemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.TemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_43_ChartSeriesLabelDefinition_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.DefaultVisualStyle;
        }
        private void set_43_ChartSeriesLabelDefinition_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_44_ChartSeriesLabelDefinition_Strategy(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Strategy;
        }
        private void set_44_ChartSeriesLabelDefinition_Strategy(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Strategy = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy)Value;
        }
        private object get_45_ChartSeries_IsSelectedBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.IsSelectedBinding;
        }
        private void set_45_ChartSeries_IsSelectedBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.IsSelectedBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_46_ChartSeries_ShowLabels(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ShowLabels;
        }
        private void set_46_ChartSeries_ShowLabels(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.ShowLabels = (global::System.Boolean)Value;
        }
        private object get_47_ChartSeries_DisplayName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.DisplayName;
        }
        private void set_47_ChartSeries_DisplayName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.DisplayName = (global::System.String)Value;
        }
        private object get_48_ChartSeries_ClipToPlotArea(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ClipToPlotArea;
        }
        private void set_48_ChartSeries_ClipToPlotArea(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.ClipToPlotArea = (global::System.Boolean)Value;
        }
        private object get_49_ChartSeries_ItemsSource(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ItemsSource;
        }
        private void set_49_ChartSeries_ItemsSource(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.ItemsSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_50_ChartElementPresenter_ZIndex(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter)instance;
            return that.ZIndex;
        }
        private void set_50_ChartElementPresenter_ZIndex(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter)instance;
            that.ZIndex = (global::System.Int32)Value;
        }
        private object get_51_ChartElementPresenter_Chart(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter)instance;
            return that.Chart;
        }
        private object get_54_RadChartBase_MinZoom(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.MinZoom;
        }
        private void set_54_RadChartBase_MinZoom(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.MinZoom = (global::Windows.Foundation.Size)Value;
        }
        private object get_55_RadChartBase_EmptyContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.EmptyContent;
        }
        private void set_55_RadChartBase_EmptyContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.EmptyContent = (global::System.Object)Value;
        }
        private object get_56_RadCartesianChart_Grid(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.Grid;
        }
        private void set_56_RadCartesianChart_Grid(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            that.Grid = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)Value;
        }
        private object get_57_RadCartesianChart_HorizontalAxis(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.HorizontalAxis;
        }
        private void set_57_RadCartesianChart_HorizontalAxis(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            that.HorizontalAxis = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)Value;
        }
        private object get_58_RadCartesianChart_VerticalAxis(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.VerticalAxis;
        }
        private void set_58_RadCartesianChart_VerticalAxis(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            that.VerticalAxis = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)Value;
        }
        private object get_59_RadChartBase_Behaviors(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.Behaviors;
        }
        private object get_60_ChartBehavior_Chart(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior)instance;
            return that.Chart;
        }
        private object get_61_RadCartesianChart_Indicators(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.Indicators;
        }
        private object get_62_IndicatorBase_DataPoints(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)instance;
            return that.DataPoints;
        }
        private object get_63_CategoricalDataPoint_Value(object instance)
        {
            var that = (global::Telerik.Charting.CategoricalDataPoint)instance;
            return that.Value;
        }
        private void set_63_CategoricalDataPoint_Value(object instance, object Value)
        {
            var that = (global::Telerik.Charting.CategoricalDataPoint)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_64_CategoricalDataPointBase_Category(object instance)
        {
            var that = (global::Telerik.Charting.CategoricalDataPointBase)instance;
            return that.Category;
        }
        private void set_64_CategoricalDataPointBase_Category(object instance, object Value)
        {
            var that = (global::Telerik.Charting.CategoricalDataPointBase)instance;
            that.Category = (global::System.Object)Value;
        }
        private object get_65_DataPoint_Label(object instance)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            return that.Label;
        }
        private void set_65_DataPoint_Label(object instance, object Value)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            that.Label = (global::System.Object)Value;
        }
        private object get_66_DataPoint_DataItem(object instance)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            return that.DataItem;
        }
        private object get_67_DataPoint_IsSelected(object instance)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            return that.IsSelected;
        }
        private void set_67_DataPoint_IsSelected(object instance, object Value)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_68_ChartNode_IsArrangeValid(object instance)
        {
            var that = (global::Telerik.Charting.ChartNode)instance;
            return that.IsArrangeValid;
        }
        private object get_69_ChartNode_NodeState(object instance)
        {
            var that = (global::Telerik.Charting.ChartNode)instance;
            return that.NodeState;
        }
        private object get_70_ChartNode_Index(object instance)
        {
            var that = (global::Telerik.Charting.ChartNode)instance;
            return that.Index;
        }
        private object get_71_ChartNode_CollectionIndex(object instance)
        {
            var that = (global::Telerik.Charting.ChartNode)instance;
            return that.CollectionIndex;
        }
        private object get_72_ChartNode_IsTreeLoaded(object instance)
        {
            var that = (global::Telerik.Charting.ChartNode)instance;
            return that.IsTreeLoaded;
        }
        private object get_73_ChartNode_LayoutSlot(object instance)
        {
            var that = (global::Telerik.Charting.ChartNode)instance;
            return that.LayoutSlot;
        }
        private object get_74_ChartNode_Parent(object instance)
        {
            var that = (global::Telerik.Charting.ChartNode)instance;
            return that.Parent;
        }
        private object get_75_ChartNode_Presenter(object instance)
        {
            var that = (global::Telerik.Charting.ChartNode)instance;
            return that.Presenter;
        }
        private object get_76_DisposableObject_IsDisposing(object instance)
        {
            var that = (global::Telerik.Charting.DisposableObject)instance;
            return that.IsDisposing;
        }
        private object get_77_DisposableObject_IsDisposed(object instance)
        {
            var that = (global::Telerik.Charting.DisposableObject)instance;
            return that.IsDisposed;
        }
        private object get_78_IndicatorBase_CategoryBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)instance;
            return that.CategoryBinding;
        }
        private void set_78_IndicatorBase_CategoryBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)instance;
            that.CategoryBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_79_RadChartBase_Zoom(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.Zoom;
        }
        private void set_79_RadChartBase_Zoom(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.Zoom = (global::Windows.Foundation.Size)Value;
        }
        private object get_80_RadChartBase_MaxZoom(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.MaxZoom;
        }
        private void set_80_RadChartBase_MaxZoom(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.MaxZoom = (global::Windows.Foundation.Size)Value;
        }
        private object get_81_RadChartBase_PlotOrigin(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PlotOrigin;
        }
        private object get_82_RadChartBase_PlotAreaClip(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PlotAreaClip;
        }
        private object get_83_RadChartBase_ScrollOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.ScrollOffset;
        }
        private void set_83_RadChartBase_ScrollOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.ScrollOffset = (global::Windows.Foundation.Point)Value;
        }
        private object get_84_RadChartBase_SeriesProvider(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.SeriesProvider;
        }
        private void set_84_RadChartBase_SeriesProvider(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.SeriesProvider = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider)Value;
        }
        private object get_85_RadChartBase_ClipToBounds(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.ClipToBounds;
        }
        private void set_85_RadChartBase_ClipToBounds(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.ClipToBounds = (global::System.Boolean)Value;
        }
        private object get_86_RadChartBase_EmptyContentTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.EmptyContentTemplate;
        }
        private void set_86_RadChartBase_EmptyContentTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.EmptyContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_87_RadChartBase_PlotAreaStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PlotAreaStyle;
        }
        private void set_87_RadChartBase_PlotAreaStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.PlotAreaStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_88_RadChartBase_Palette(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.Palette;
        }
        private void set_88_RadChartBase_Palette(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.Palette = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)Value;
        }
        private object get_89_RadChartBase_PaletteName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PaletteName;
        }
        private void set_89_RadChartBase_PaletteName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.PaletteName = (global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName)Value;
        }
        private object get_90_RadChartBase_SelectionPalette(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.SelectionPalette;
        }
        private void set_90_RadChartBase_SelectionPalette(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.SelectionPalette = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)Value;
        }
        private object get_91_RadChartBase_SelectionPaletteName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.SelectionPaletteName;
        }
        private void set_91_RadChartBase_SelectionPaletteName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.SelectionPaletteName = (global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName)Value;
        }
        private object get_92_CartesianChartGrid_MajorXLinesRenderMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            return that.MajorXLinesRenderMode;
        }
        private void set_92_CartesianChartGrid_MajorXLinesRenderMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            that.MajorXLinesRenderMode = (global::Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode)Value;
        }
        private object get_93_CartesianChartGrid_MajorLinesVisibility(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            return that.MajorLinesVisibility;
        }
        private void set_93_CartesianChartGrid_MajorLinesVisibility(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            that.MajorLinesVisibility = (global::Telerik.UI.Xaml.Controls.Chart.GridLineVisibility)Value;
        }
        private object get_94_CartesianChartGrid_MajorYLinesRenderMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            return that.MajorYLinesRenderMode;
        }
        private void set_94_CartesianChartGrid_MajorYLinesRenderMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            that.MajorYLinesRenderMode = (global::Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode)Value;
        }
        private object get_95_CartesianChartGrid_StripLinesVisibility(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            return that.StripLinesVisibility;
        }
        private void set_95_CartesianChartGrid_StripLinesVisibility(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            that.StripLinesVisibility = (global::Telerik.UI.Xaml.Controls.Chart.GridLineVisibility)Value;
        }
        private object get_96_CartesianChartGrid_XStripeBrushes(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            return that.XStripeBrushes;
        }
        private object get_97_CartesianChartGrid_YStripeBrushes(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            return that.YStripeBrushes;
        }
        private object get_98_CartesianChartGrid_MajorXLineStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            return that.MajorXLineStyle;
        }
        private void set_98_CartesianChartGrid_MajorXLineStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            that.MajorXLineStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_99_CartesianChartGrid_MajorYLineStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            return that.MajorYLineStyle;
        }
        private void set_99_CartesianChartGrid_MajorYLineStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)instance;
            that.MajorYLineStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_100_Axis_LabelFitMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelFitMode;
        }
        private void set_100_Axis_LabelFitMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelFitMode = (global::Telerik.Charting.AxisLabelFitMode)Value;
        }
        private object get_101_Axis_LabelInterval(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelInterval;
        }
        private void set_101_Axis_LabelInterval(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelInterval = (global::System.Int32)Value;
        }
        private object get_102_DateTimeCategoricalAxis_DateTimeComponent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.DateTimeCategoricalAxis)instance;
            return that.DateTimeComponent;
        }
        private void set_102_DateTimeCategoricalAxis_DateTimeComponent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.DateTimeCategoricalAxis)instance;
            that.DateTimeComponent = (global::Telerik.Charting.DateTimeComponent)Value;
        }
        private object get_103_CategoricalAxis_AutoGroup(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            return that.AutoGroup;
        }
        private void set_103_CategoricalAxis_AutoGroup(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            that.AutoGroup = (global::System.Boolean)Value;
        }
        private object get_104_CategoricalAxis_MajorTickInterval(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            return that.MajorTickInterval;
        }
        private void set_104_CategoricalAxis_MajorTickInterval(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            that.MajorTickInterval = (global::System.Int32)Value;
        }
        private object get_105_CategoricalAxis_PlotMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            return that.PlotMode;
        }
        private void set_105_CategoricalAxis_PlotMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            that.PlotMode = (global::Telerik.Charting.AxisPlotMode)Value;
        }
        private object get_106_CategoricalAxis_GapLength(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            return that.GapLength;
        }
        private void set_106_CategoricalAxis_GapLength(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            that.GapLength = (global::System.Double)Value;
        }
        private object get_107_CartesianAxis_HorizontalLocation(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)instance;
            return that.HorizontalLocation;
        }
        private void set_107_CartesianAxis_HorizontalLocation(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)instance;
            that.HorizontalLocation = (global::Telerik.Charting.AxisHorizontalLocation)Value;
        }
        private object get_108_CartesianAxis_VerticalLocation(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)instance;
            return that.VerticalLocation;
        }
        private void set_108_CartesianAxis_VerticalLocation(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)instance;
            that.VerticalLocation = (global::Telerik.Charting.AxisVerticalLocation)Value;
        }
        private object get_109_Axis_LabelFormatter(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelFormatter;
        }
        private void set_109_Axis_LabelFormatter(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelFormatter = (global::Telerik.Charting.IContentFormatter)Value;
        }
        private object get_110_Axis_LabelRotationAngle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelRotationAngle;
        }
        private void set_110_Axis_LabelRotationAngle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelRotationAngle = (global::System.Double)Value;
        }
        private object get_111_Axis_LineStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LineStyle;
        }
        private void set_111_Axis_LineStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LineStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_112_Axis_LastLabelVisibility(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LastLabelVisibility;
        }
        private void set_112_Axis_LastLabelVisibility(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LastLabelVisibility = (global::Telerik.Charting.AxisLastLabelVisibility)Value;
        }
        private object get_113_Axis_LabelFormat(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelFormat;
        }
        private void set_113_Axis_LabelFormat(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelFormat = (global::System.String)Value;
        }
        private object get_114_Axis_MajorTickOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.MajorTickOffset;
        }
        private void set_114_Axis_MajorTickOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.MajorTickOffset = (global::System.Int32)Value;
        }
        private object get_115_Axis_LabelOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelOffset;
        }
        private void set_115_Axis_LabelOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelOffset = (global::System.Int32)Value;
        }
        private object get_116_Axis_ShowLabels(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.ShowLabels;
        }
        private void set_116_Axis_ShowLabels(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.ShowLabels = (global::System.Boolean)Value;
        }
        private object get_117_Axis_Title(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.Title;
        }
        private void set_117_Axis_Title(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.Title = (global::System.Object)Value;
        }
        private object get_118_Axis_LabelTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelTemplate;
        }
        private void set_118_Axis_LabelTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_119_Axis_LabelTemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelTemplateSelector;
        }
        private void set_119_Axis_LabelTemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelTemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_120_Axis_LabelStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelStyle;
        }
        private void set_120_Axis_LabelStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_121_Axis_TitleTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.TitleTemplate;
        }
        private void set_121_Axis_TitleTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.TitleTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_122_Axis_MajorTickTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.MajorTickTemplate;
        }
        private void set_122_Axis_MajorTickTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.MajorTickTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_123_Axis_MajorTickStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.MajorTickStyle;
        }
        private void set_123_Axis_MajorTickStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.MajorTickStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_124_Axis_TickThickness(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.TickThickness;
        }
        private void set_124_Axis_TickThickness(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.TickThickness = (global::System.Double)Value;
        }
        private object get_125_LinearAxis_MajorStep(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.LinearAxis)instance;
            return that.MajorStep;
        }
        private void set_125_LinearAxis_MajorStep(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.LinearAxis)instance;
            that.MajorStep = (global::System.Double)Value;
        }
        private object get_126_NumericalAxis_Minimum(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.Minimum;
        }
        private void set_126_NumericalAxis_Minimum(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_127_NumericalAxis_Maximum(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.Maximum;
        }
        private void set_127_NumericalAxis_Maximum(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_128_NumericalAxis_RangeExtendDirection(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.RangeExtendDirection;
        }
        private void set_128_NumericalAxis_RangeExtendDirection(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            that.RangeExtendDirection = (global::Telerik.Charting.NumericalAxisRangeExtendDirection)Value;
        }
        private object get_129_NumericalAxis_DesiredTickCount(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.DesiredTickCount;
        }
        private void set_129_NumericalAxis_DesiredTickCount(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            that.DesiredTickCount = (global::System.Int32)Value;
        }
        private object get_130_NumericalAxis_ActualRange(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.ActualRange;
        }
        private object get_131_CategoricalSeries_DataPoints(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            return that.DataPoints;
        }
        private object get_132_CategoricalStrokedSeries_Stroke(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            return that.Stroke;
        }
        private void set_132_CategoricalStrokedSeries_Stroke(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            that.Stroke = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_133_CategoricalStrokedSeries_StrokeThickness(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            return that.StrokeThickness;
        }
        private void set_133_CategoricalStrokedSeries_StrokeThickness(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_134_CategoricalSeries_ValueBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            return that.ValueBinding;
        }
        private void set_134_CategoricalSeries_ValueBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            that.ValueBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_135_CategoricalSeries_CategoryBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            return that.CategoryBinding;
        }
        private void set_135_CategoricalSeries_CategoryBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            that.CategoryBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_136_CategoricalStrokedSeries_StrokeDashArray(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            return that.StrokeDashArray;
        }
        private void set_136_CategoricalStrokedSeries_StrokeDashArray(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            that.StrokeDashArray = (global::Windows.UI.Xaml.Media.DoubleCollection)Value;
        }
        private object get_137_CategoricalStrokedSeries_StrokeLineJoin(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            return that.StrokeLineJoin;
        }
        private void set_137_CategoricalStrokedSeries_StrokeLineJoin(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            that.StrokeLineJoin = (global::Windows.UI.Xaml.Media.PenLineJoin)Value;
        }
        private object get_138_CategoricalSeries_CombineMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            return that.CombineMode;
        }
        private void set_138_CategoricalSeries_CombineMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            that.CombineMode = (global::Telerik.Charting.ChartSeriesCombineMode)Value;
        }
        private object get_139_CategoricalSeries_StackGroupKey(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            return that.StackGroupKey;
        }
        private void set_139_CategoricalSeries_StackGroupKey(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            that.StackGroupKey = (global::System.Object)Value;
        }
        private object get_140_ChartTrackBallBehavior_ShowIntersectionPoints(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior)instance;
            return that.ShowIntersectionPoints;
        }
        private void set_140_ChartTrackBallBehavior_ShowIntersectionPoints(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior)instance;
            that.ShowIntersectionPoints = (global::System.Boolean)Value;
        }
        private object get_141_ChartTrackBallBehavior_InfoMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior)instance;
            return that.InfoMode;
        }
        private void set_141_ChartTrackBallBehavior_InfoMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior)instance;
            that.InfoMode = (global::Telerik.UI.Xaml.Controls.Chart.TrackInfoMode)Value;
        }
        private object get_142_ChartTrackBallBehavior_ShowInfo(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior)instance;
            return that.ShowInfo;
        }
        private void set_142_ChartTrackBallBehavior_ShowInfo(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior)instance;
            that.ShowInfo = (global::System.Boolean)Value;
        }
        private object get_143_ChartTrackBallBehavior_LineStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior)instance;
            return that.LineStyle;
        }
        private void set_143_ChartTrackBallBehavior_LineStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior)instance;
            that.LineStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_144_ChartTrackBallBehavior_InfoStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior)instance;
            return that.InfoStyle;
        }
        private void set_144_ChartTrackBallBehavior_InfoStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior)instance;
            that.InfoStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_145_ChartTrackBallBehavior_SnapMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior)instance;
            return that.SnapMode;
        }
        private void set_145_ChartTrackBallBehavior_SnapMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior)instance;
            that.SnapMode = (global::Telerik.UI.Xaml.Controls.Chart.TrackBallSnapMode)Value;
        }
        private object get_146_ChartTrackBallBehavior_TrackInfoTemplate(object instance)
        {
            return global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior.GetTrackInfoTemplate((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_146_ChartTrackBallBehavior_TrackInfoTemplate(object instance, object Value)
        {
            global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior.SetTrackInfoTemplate((global::Windows.UI.Xaml.DependencyObject)instance, (Windows.UI.Xaml.DataTemplate)Value);
                    }
        private object get_147_ChartTrackBallBehavior_IntersectionTemplate(object instance)
        {
            return global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior.GetIntersectionTemplate((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_147_ChartTrackBallBehavior_IntersectionTemplate(object instance, object Value)
        {
            global::Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior.SetIntersectionTemplate((global::Windows.UI.Xaml.DependencyObject)instance, (Windows.UI.Xaml.DataTemplate)Value);
                    }
        private object get_148_PropertyNameDataPointBinding_PropertyName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding)instance;
            return that.PropertyName;
        }
        private void set_148_PropertyNameDataPointBinding_PropertyName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding)instance;
            that.PropertyName = (global::System.String)Value;
        }
        private object get_149_ChartPanAndZoomBehavior_PanMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior)instance;
            return that.PanMode;
        }
        private void set_149_ChartPanAndZoomBehavior_PanMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior)instance;
            that.PanMode = (global::Telerik.UI.Xaml.Controls.Chart.ChartPanZoomMode)Value;
        }
        private object get_150_ChartPanAndZoomBehavior_ZoomMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior)instance;
            return that.ZoomMode;
        }
        private void set_150_ChartPanAndZoomBehavior_ZoomMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior)instance;
            that.ZoomMode = (global::Telerik.UI.Xaml.Controls.Chart.ChartPanZoomMode)Value;
        }
        private object get_151_ChartPanAndZoomBehavior_HandleDoubleTap(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior)instance;
            return that.HandleDoubleTap;
        }
        private void set_151_ChartPanAndZoomBehavior_HandleDoubleTap(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior)instance;
            that.HandleDoubleTap = (global::System.Boolean)Value;
        }
        private object get_152_HubTileBase_UpdateInterval(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            return that.UpdateInterval;
        }
        private void set_152_HubTileBase_UpdateInterval(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            that.UpdateInterval = (global::System.TimeSpan)Value;
        }
        private object get_153_RadCustomHubTile_FrontContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadCustomHubTile)instance;
            return that.FrontContent;
        }
        private void set_153_RadCustomHubTile_FrontContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadCustomHubTile)instance;
            that.FrontContent = (global::System.Object)Value;
        }
        private object get_154_HubTileBase_BackContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            return that.BackContent;
        }
        private void set_154_HubTileBase_BackContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            that.BackContent = (global::System.Object)Value;
        }
        private object get_155_RadCustomHubTile_FrontContentTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadCustomHubTile)instance;
            return that.FrontContentTemplate;
        }
        private void set_155_RadCustomHubTile_FrontContentTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.RadCustomHubTile)instance;
            that.FrontContentTemplate = (global::System.Object)Value;
        }
        private object get_156_HubTileBase_IsFlipped(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            return that.IsFlipped;
        }
        private void set_156_HubTileBase_IsFlipped(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            that.IsFlipped = (global::System.Boolean)Value;
        }
        private object get_157_HubTileBase_Command(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            return that.Command;
        }
        private void set_157_HubTileBase_Command(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_158_HubTileBase_CommandParameter(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            return that.CommandParameter;
        }
        private void set_158_HubTileBase_CommandParameter(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_159_HubTileBase_Title(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            return that.Title;
        }
        private void set_159_HubTileBase_Title(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            that.Title = (global::System.Object)Value;
        }
        private object get_160_HubTileBase_TitleTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            return that.TitleTemplate;
        }
        private void set_160_HubTileBase_TitleTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            that.TitleTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_161_HubTileBase_IsFrozen(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            return that.IsFrozen;
        }
        private void set_161_HubTileBase_IsFrozen(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            that.IsFrozen = (global::System.Boolean)Value;
        }
        private object get_162_HubTileBase_BackContentTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            return that.BackContentTemplate;
        }
        private void set_162_HubTileBase_BackContentTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.HubTileBase)instance;
            that.BackContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_163_HubTileService_GroupTag(object instance)
        {
            return global::Telerik.UI.Xaml.Controls.Primitives.HubTileService.GetGroupTag((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_163_HubTileService_GroupTag(object instance, object Value)
        {
            global::Telerik.UI.Xaml.Controls.Primitives.HubTileService.SetGroupTag((global::Windows.UI.Xaml.DependencyObject)instance, (System.String)Value);
                    }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember xamlMember = null;
            global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Telerik.UI.Xaml.Controls.RadHeaderedControl.Header":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_RadHeaderedControl_Header;
                xamlMember.Setter = set_0_RadHeaderedControl_Header;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ItemLength":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ItemLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_DateTimePicker_ItemLength;
                xamlMember.Setter = set_1_DateTimePicker_ItemLength;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.DisplayValueFormat":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "DisplayValueFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_DateTimePicker_DisplayValueFormat;
                xamlMember.Setter = set_2_DateTimePicker_DisplayValueFormat;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.Value":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Value", "System.Nullable<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_DateTimePicker_Value;
                xamlMember.Setter = set_3_DateTimePicker_Value;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.DisplayMode":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "DisplayMode", "Telerik.UI.Xaml.Controls.Input.DateTimePickerDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_DateTimePicker_DisplayMode;
                xamlMember.Setter = set_4_DateTimePicker_DisplayMode;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.AutoSizeWidth":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "AutoSizeWidth", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_DateTimePicker_AutoSizeWidth;
                xamlMember.Setter = set_5_DateTimePicker_AutoSizeWidth;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.IsReadOnly":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IsReadOnly", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_DateTimePicker_IsReadOnly;
                xamlMember.Setter = set_6_DateTimePicker_IsReadOnly;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.EmptyContent":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "EmptyContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_DateTimePicker_EmptyContent;
                xamlMember.Setter = set_7_DateTimePicker_EmptyContent;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.EmptyContentTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "EmptyContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_DateTimePicker_EmptyContentTemplate;
                xamlMember.Setter = set_8_DateTimePicker_EmptyContentTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ValueString":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ValueString", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_DateTimePicker_ValueString;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.MaxValue":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MaxValue", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_DateTimePicker_MaxValue;
                xamlMember.Setter = set_10_DateTimePicker_MaxValue;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.MinValue":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MinValue", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_DateTimePicker_MinValue;
                xamlMember.Setter = set_11_DateTimePicker_MinValue;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorBackgroundStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "SelectorBackgroundStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_DateTimePicker_SelectorBackgroundStyle;
                xamlMember.Setter = set_12_DateTimePicker_SelectorBackgroundStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ItemSpacing":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ItemSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_DateTimePicker_ItemSpacing;
                xamlMember.Setter = set_13_DateTimePicker_ItemSpacing;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorFormat":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "SelectorFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_DateTimePicker_SelectorFormat;
                xamlMember.Setter = set_14_DateTimePicker_SelectorFormat;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.IsOpen":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_DateTimePicker_IsOpen;
                xamlMember.Setter = set_15_DateTimePicker_IsOpen;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorDefaultValue":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "SelectorDefaultValue", "System.Nullable<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_DateTimePicker_SelectorDefaultValue;
                xamlMember.Setter = set_16_DateTimePicker_SelectorDefaultValue;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorHeader":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "SelectorHeader", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_DateTimePicker_SelectorHeader;
                xamlMember.Setter = set_17_DateTimePicker_SelectorHeader;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorHeaderTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "SelectorHeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_DateTimePicker_SelectorHeaderTemplate;
                xamlMember.Setter = set_18_DateTimePicker_SelectorHeaderTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ItemCount":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ItemCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_DateTimePicker_ItemCount;
                xamlMember.Setter = set_19_DateTimePicker_ItemCount;
                break;
            case "Telerik.UI.Xaml.Controls.RadHeaderedControl.HeaderTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_RadHeaderedControl_HeaderTemplate;
                xamlMember.Setter = set_20_RadHeaderedControl_HeaderTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.RadHeaderedControl.HeaderStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "HeaderStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_RadHeaderedControl_HeaderStyle;
                xamlMember.Setter = set_21_RadHeaderedControl_HeaderStyle;
                break;
            case "Telerik.UI.Xaml.Controls.RadControl.CurrentVisualState":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "CurrentVisualState", "String");
                xamlMember.Getter = get_22_RadControl_CurrentVisualState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Series":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Series", "Telerik.UI.Xaml.Controls.Chart.CartesianSeriesCollection");
                xamlMember.Getter = get_23_RadCartesianChart_Series;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianSeries.HorizontalAxis":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "HorizontalAxis", "Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_CartesianSeries_HorizontalAxis;
                xamlMember.Setter = set_24_CartesianSeries_HorizontalAxis;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianSeries.VerticalAxis":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "VerticalAxis", "Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_CartesianSeries_VerticalAxis;
                xamlMember.Setter = set_25_CartesianSeries_VerticalAxis;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianSeries.LegendTitle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LegendTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_CartesianSeries_LegendTitle;
                xamlMember.Setter = set_26_CartesianSeries_LegendTitle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianSeries.IsVisibleInLegend":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IsVisibleInLegend", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_CartesianSeries_IsVisibleInLegend;
                xamlMember.Setter = set_27_CartesianSeries_IsVisibleInLegend;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.DefaultVisualStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_PointTemplateSeries_DefaultVisualStyle;
                xamlMember.Setter = set_28_PointTemplateSeries_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.PointTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "PointTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_PointTemplateSeries_PointTemplate;
                xamlMember.Setter = set_29_PointTemplateSeries_PointTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.PointTemplateSelector":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "PointTemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_PointTemplateSeries_PointTemplateSelector;
                xamlMember.Setter = set_30_PointTemplateSeries_PointTemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.PointTemplates":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "PointTemplates", "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.DataTemplate>");
                xamlMember.Getter = get_31_PointTemplateSeries_PointTemplates;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.IsSelected":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_ChartSeries_IsSelected;
                xamlMember.Setter = set_32_ChartSeries_IsSelected;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.AllowSelect":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "AllowSelect", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_ChartSeries_AllowSelect;
                xamlMember.Setter = set_33_ChartSeries_AllowSelect;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.PaletteIndex":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "PaletteIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_ChartSeries_PaletteIndex;
                xamlMember.Setter = set_34_ChartSeries_PaletteIndex;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.LabelDefinitions":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LabelDefinitions", "System.Collections.ObjectModel.ObservableCollection<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>");
                xamlMember.Getter = get_35_ChartSeries_LabelDefinitions;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Binding":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Binding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_ChartSeriesLabelDefinition_Binding;
                xamlMember.Setter = set_36_ChartSeriesLabelDefinition_Binding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Format":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Format", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_ChartSeriesLabelDefinition_Format;
                xamlMember.Setter = set_37_ChartSeriesLabelDefinition_Format;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Margin":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Margin", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_ChartSeriesLabelDefinition_Margin;
                xamlMember.Setter = set_38_ChartSeriesLabelDefinition_Margin;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.HorizontalAlignment":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "HorizontalAlignment", "Windows.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_ChartSeriesLabelDefinition_HorizontalAlignment;
                xamlMember.Setter = set_39_ChartSeriesLabelDefinition_HorizontalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.VerticalAlignment":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "VerticalAlignment", "Windows.UI.Xaml.VerticalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_ChartSeriesLabelDefinition_VerticalAlignment;
                xamlMember.Setter = set_40_ChartSeriesLabelDefinition_VerticalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Template":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Template", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_ChartSeriesLabelDefinition_Template;
                xamlMember.Setter = set_41_ChartSeriesLabelDefinition_Template;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.TemplateSelector":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "TemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_ChartSeriesLabelDefinition_TemplateSelector;
                xamlMember.Setter = set_42_ChartSeriesLabelDefinition_TemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.DefaultVisualStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_ChartSeriesLabelDefinition_DefaultVisualStyle;
                xamlMember.Setter = set_43_ChartSeriesLabelDefinition_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Strategy":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Strategy", "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_ChartSeriesLabelDefinition_Strategy;
                xamlMember.Setter = set_44_ChartSeriesLabelDefinition_Strategy;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.IsSelectedBinding":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IsSelectedBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_ChartSeries_IsSelectedBinding;
                xamlMember.Setter = set_45_ChartSeries_IsSelectedBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ShowLabels":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ShowLabels", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_ChartSeries_ShowLabels;
                xamlMember.Setter = set_46_ChartSeries_ShowLabels;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.DisplayName":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "DisplayName", "String");
                xamlMember.Getter = get_47_ChartSeries_DisplayName;
                xamlMember.Setter = set_47_ChartSeries_DisplayName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ClipToPlotArea":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ClipToPlotArea", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_ChartSeries_ClipToPlotArea;
                xamlMember.Setter = set_48_ChartSeries_ClipToPlotArea;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ItemsSource":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_ChartSeries_ItemsSource;
                xamlMember.Setter = set_49_ChartSeries_ItemsSource;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter.ZIndex":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_50_ChartElementPresenter_ZIndex;
                xamlMember.Setter = set_50_ChartElementPresenter_ZIndex;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter.Chart":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Chart", "Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember.Getter = get_51_ChartElementPresenter_Chart;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.SizeFromStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "SizeFromStyle", "Telerik.Charting.RadSize");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.Style");
                xamlMember.SetIsAttachable();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PresenterBase.VisualDesiredSize":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "VisualDesiredSize", "Telerik.Charting.RadSize");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsAttachable();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.MinZoom":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MinZoom", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_RadChartBase_MinZoom;
                xamlMember.Setter = set_54_RadChartBase_MinZoom;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.EmptyContent":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "EmptyContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_RadChartBase_EmptyContent;
                xamlMember.Setter = set_55_RadChartBase_EmptyContent;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Grid":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Grid", "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid");
                xamlMember.Getter = get_56_RadCartesianChart_Grid;
                xamlMember.Setter = set_56_RadCartesianChart_Grid;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.HorizontalAxis":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "HorizontalAxis", "Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_RadCartesianChart_HorizontalAxis;
                xamlMember.Setter = set_57_RadCartesianChart_HorizontalAxis;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.VerticalAxis":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "VerticalAxis", "Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_RadCartesianChart_VerticalAxis;
                xamlMember.Setter = set_58_RadCartesianChart_VerticalAxis;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.Behaviors":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Behaviors", "Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection");
                xamlMember.Getter = get_59_RadChartBase_Behaviors;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartBehavior.Chart":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartBehavior");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Chart", "Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember.Getter = get_60_ChartBehavior_Chart;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Indicators":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Indicators", "Telerik.UI.Xaml.Controls.Chart.IndicatorCollection");
                xamlMember.Getter = get_61_RadCartesianChart_Indicators;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.IndicatorBase.DataPoints":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.IndicatorBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "DataPoints", "Telerik.Charting.DataPointCollection<Telerik.Charting.CategoricalDataPoint>");
                xamlMember.Getter = get_62_IndicatorBase_DataPoints;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.CategoricalDataPoint.Value":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.CategoricalDataPoint");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.Getter = get_63_CategoricalDataPoint_Value;
                xamlMember.Setter = set_63_CategoricalDataPoint_Value;
                break;
            case "Telerik.Charting.CategoricalDataPointBase.Category":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.CategoricalDataPointBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Category", "Object");
                xamlMember.Getter = get_64_CategoricalDataPointBase_Category;
                xamlMember.Setter = set_64_CategoricalDataPointBase_Category;
                break;
            case "Telerik.Charting.DataPoint.Label":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DataPoint");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Label", "Object");
                xamlMember.Getter = get_65_DataPoint_Label;
                xamlMember.Setter = set_65_DataPoint_Label;
                break;
            case "Telerik.Charting.DataPoint.DataItem":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DataPoint");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "DataItem", "Object");
                xamlMember.Getter = get_66_DataPoint_DataItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.DataPoint.IsSelected":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DataPoint");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.Getter = get_67_DataPoint_IsSelected;
                xamlMember.Setter = set_67_DataPoint_IsSelected;
                break;
            case "Telerik.Charting.ChartNode.IsArrangeValid":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.ChartNode");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IsArrangeValid", "Boolean");
                xamlMember.Getter = get_68_ChartNode_IsArrangeValid;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.ChartNode.NodeState":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.ChartNode");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "NodeState", "Telerik.Charting.NodeState");
                xamlMember.Getter = get_69_ChartNode_NodeState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.ChartNode.Index":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.ChartNode");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Index", "Int32");
                xamlMember.Getter = get_70_ChartNode_Index;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.ChartNode.CollectionIndex":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.ChartNode");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "CollectionIndex", "Int32");
                xamlMember.Getter = get_71_ChartNode_CollectionIndex;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.ChartNode.IsTreeLoaded":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.ChartNode");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IsTreeLoaded", "Boolean");
                xamlMember.Getter = get_72_ChartNode_IsTreeLoaded;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.ChartNode.LayoutSlot":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.ChartNode");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LayoutSlot", "Telerik.Charting.RadRect");
                xamlMember.Getter = get_73_ChartNode_LayoutSlot;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.ChartNode.Parent":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.ChartNode");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Parent", "Telerik.Charting.ChartElement");
                xamlMember.Getter = get_74_ChartNode_Parent;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.ChartNode.Presenter":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.ChartNode");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Presenter", "Telerik.Charting.IChartElementPresenter");
                xamlMember.Getter = get_75_ChartNode_Presenter;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.DisposableObject.IsDisposing":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DisposableObject");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IsDisposing", "Boolean");
                xamlMember.Getter = get_76_DisposableObject_IsDisposing;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.DisposableObject.IsDisposed":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DisposableObject");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IsDisposed", "Boolean");
                xamlMember.Getter = get_77_DisposableObject_IsDisposed;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.IndicatorBase.CategoryBinding":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.IndicatorBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "CategoryBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_IndicatorBase_CategoryBinding;
                xamlMember.Setter = set_78_IndicatorBase_CategoryBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.Zoom":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Zoom", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_RadChartBase_Zoom;
                xamlMember.Setter = set_79_RadChartBase_Zoom;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.MaxZoom":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MaxZoom", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_RadChartBase_MaxZoom;
                xamlMember.Setter = set_80_RadChartBase_MaxZoom;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PlotOrigin":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "PlotOrigin", "Windows.Foundation.Point");
                xamlMember.Getter = get_81_RadChartBase_PlotOrigin;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PlotAreaClip":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "PlotAreaClip", "Telerik.Charting.RadRect");
                xamlMember.Getter = get_82_RadChartBase_PlotAreaClip;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.ScrollOffset":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ScrollOffset", "Windows.Foundation.Point");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_RadChartBase_ScrollOffset;
                xamlMember.Setter = set_83_RadChartBase_ScrollOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.SeriesProvider":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "SeriesProvider", "Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_RadChartBase_SeriesProvider;
                xamlMember.Setter = set_84_RadChartBase_SeriesProvider;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.ClipToBounds":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ClipToBounds", "Boolean");
                xamlMember.Getter = get_85_RadChartBase_ClipToBounds;
                xamlMember.Setter = set_85_RadChartBase_ClipToBounds;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.EmptyContentTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "EmptyContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_RadChartBase_EmptyContentTemplate;
                xamlMember.Setter = set_86_RadChartBase_EmptyContentTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PlotAreaStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "PlotAreaStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_RadChartBase_PlotAreaStyle;
                xamlMember.Setter = set_87_RadChartBase_PlotAreaStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.Palette":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Palette", "Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_RadChartBase_Palette;
                xamlMember.Setter = set_88_RadChartBase_Palette;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PaletteName":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "PaletteName", "Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_RadChartBase_PaletteName;
                xamlMember.Setter = set_89_RadChartBase_PaletteName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.SelectionPalette":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "SelectionPalette", "Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_RadChartBase_SelectionPalette;
                xamlMember.Setter = set_90_RadChartBase_SelectionPalette;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.SelectionPaletteName":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "SelectionPaletteName", "Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_RadChartBase_SelectionPaletteName;
                xamlMember.Setter = set_91_RadChartBase_SelectionPaletteName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid.MajorXLinesRenderMode":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MajorXLinesRenderMode", "Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode");
                xamlMember.Getter = get_92_CartesianChartGrid_MajorXLinesRenderMode;
                xamlMember.Setter = set_92_CartesianChartGrid_MajorXLinesRenderMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid.MajorLinesVisibility":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MajorLinesVisibility", "Telerik.UI.Xaml.Controls.Chart.GridLineVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_CartesianChartGrid_MajorLinesVisibility;
                xamlMember.Setter = set_93_CartesianChartGrid_MajorLinesVisibility;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid.MajorYLinesRenderMode":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MajorYLinesRenderMode", "Telerik.UI.Xaml.Controls.Chart.GridLineRenderMode");
                xamlMember.Getter = get_94_CartesianChartGrid_MajorYLinesRenderMode;
                xamlMember.Setter = set_94_CartesianChartGrid_MajorYLinesRenderMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid.StripLinesVisibility":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "StripLinesVisibility", "Telerik.UI.Xaml.Controls.Chart.GridLineVisibility");
                xamlMember.Getter = get_95_CartesianChartGrid_StripLinesVisibility;
                xamlMember.Setter = set_95_CartesianChartGrid_StripLinesVisibility;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid.XStripeBrushes":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "XStripeBrushes", "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.Media.Brush>");
                xamlMember.Getter = get_96_CartesianChartGrid_XStripeBrushes;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid.YStripeBrushes":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "YStripeBrushes", "System.Collections.ObjectModel.ObservableCollection<Windows.UI.Xaml.Media.Brush>");
                xamlMember.Getter = get_97_CartesianChartGrid_YStripeBrushes;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid.MajorXLineStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MajorXLineStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_CartesianChartGrid_MajorXLineStyle;
                xamlMember.Setter = set_98_CartesianChartGrid_MajorXLineStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid.MajorYLineStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MajorYLineStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_CartesianChartGrid_MajorYLineStyle;
                xamlMember.Setter = set_99_CartesianChartGrid_MajorYLineStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelFitMode":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LabelFitMode", "Telerik.Charting.AxisLabelFitMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_Axis_LabelFitMode;
                xamlMember.Setter = set_100_Axis_LabelFitMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelInterval":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LabelInterval", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_Axis_LabelInterval;
                xamlMember.Setter = set_101_Axis_LabelInterval;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.DateTimeCategoricalAxis.DateTimeComponent":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.DateTimeCategoricalAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "DateTimeComponent", "Telerik.Charting.DateTimeComponent");
                xamlMember.Getter = get_102_DateTimeCategoricalAxis_DateTimeComponent;
                xamlMember.Setter = set_102_DateTimeCategoricalAxis_DateTimeComponent;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis.AutoGroup":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "AutoGroup", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_CategoricalAxis_AutoGroup;
                xamlMember.Setter = set_103_CategoricalAxis_AutoGroup;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis.MajorTickInterval":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MajorTickInterval", "Int32");
                xamlMember.Getter = get_104_CategoricalAxis_MajorTickInterval;
                xamlMember.Setter = set_104_CategoricalAxis_MajorTickInterval;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis.PlotMode":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "PlotMode", "Telerik.Charting.AxisPlotMode");
                xamlMember.Getter = get_105_CategoricalAxis_PlotMode;
                xamlMember.Setter = set_105_CategoricalAxis_PlotMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis.GapLength":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "GapLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_CategoricalAxis_GapLength;
                xamlMember.Setter = set_106_CategoricalAxis_GapLength;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianAxis.HorizontalLocation":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "HorizontalLocation", "Telerik.Charting.AxisHorizontalLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_CartesianAxis_HorizontalLocation;
                xamlMember.Setter = set_107_CartesianAxis_HorizontalLocation;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianAxis.VerticalLocation":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "VerticalLocation", "Telerik.Charting.AxisVerticalLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_CartesianAxis_VerticalLocation;
                xamlMember.Setter = set_108_CartesianAxis_VerticalLocation;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelFormatter":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LabelFormatter", "Telerik.Charting.IContentFormatter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_Axis_LabelFormatter;
                xamlMember.Setter = set_109_Axis_LabelFormatter;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelRotationAngle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LabelRotationAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_Axis_LabelRotationAngle;
                xamlMember.Setter = set_110_Axis_LabelRotationAngle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LineStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LineStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_Axis_LineStyle;
                xamlMember.Setter = set_111_Axis_LineStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LastLabelVisibility":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LastLabelVisibility", "Telerik.Charting.AxisLastLabelVisibility");
                xamlMember.Getter = get_112_Axis_LastLabelVisibility;
                xamlMember.Setter = set_112_Axis_LastLabelVisibility;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelFormat":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LabelFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_Axis_LabelFormat;
                xamlMember.Setter = set_113_Axis_LabelFormat;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.MajorTickOffset":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MajorTickOffset", "Int32");
                xamlMember.Getter = get_114_Axis_MajorTickOffset;
                xamlMember.Setter = set_114_Axis_MajorTickOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelOffset":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LabelOffset", "Int32");
                xamlMember.Getter = get_115_Axis_LabelOffset;
                xamlMember.Setter = set_115_Axis_LabelOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.ShowLabels":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ShowLabels", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_Axis_ShowLabels;
                xamlMember.Setter = set_116_Axis_ShowLabels;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.Title":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Title", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_Axis_Title;
                xamlMember.Setter = set_117_Axis_Title;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_Axis_LabelTemplate;
                xamlMember.Setter = set_118_Axis_LabelTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelTemplateSelector":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LabelTemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_Axis_LabelTemplateSelector;
                xamlMember.Setter = set_119_Axis_LabelTemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LabelStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_Axis_LabelStyle;
                xamlMember.Setter = set_120_Axis_LabelStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.TitleTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "TitleTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_Axis_TitleTemplate;
                xamlMember.Setter = set_121_Axis_TitleTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.MajorTickTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MajorTickTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_Axis_MajorTickTemplate;
                xamlMember.Setter = set_122_Axis_MajorTickTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.MajorTickStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MajorTickStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_Axis_MajorTickStyle;
                xamlMember.Setter = set_123_Axis_MajorTickStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.TickThickness":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "TickThickness", "Double");
                xamlMember.Getter = get_124_Axis_TickThickness;
                xamlMember.Setter = set_124_Axis_TickThickness;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.LinearAxis.MajorStep":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.LinearAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "MajorStep", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_LinearAxis_MajorStep;
                xamlMember.Setter = set_125_LinearAxis_MajorStep;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.Minimum":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_NumericalAxis_Minimum;
                xamlMember.Setter = set_126_NumericalAxis_Minimum;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.Maximum":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_NumericalAxis_Maximum;
                xamlMember.Setter = set_127_NumericalAxis_Maximum;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.RangeExtendDirection":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "RangeExtendDirection", "Telerik.Charting.NumericalAxisRangeExtendDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_NumericalAxis_RangeExtendDirection;
                xamlMember.Setter = set_128_NumericalAxis_RangeExtendDirection;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.DesiredTickCount":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "DesiredTickCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_NumericalAxis_DesiredTickCount;
                xamlMember.Setter = set_129_NumericalAxis_DesiredTickCount;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.ActualRange":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ActualRange", "Telerik.Charting.ValueRange<Double>");
                xamlMember.Getter = get_130_NumericalAxis_ActualRange;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeries.DataPoints":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "DataPoints", "Telerik.Charting.DataPointCollection<Telerik.Charting.CategoricalDataPoint>");
                xamlMember.Getter = get_131_CategoricalSeries_DataPoints;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries.Stroke":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Stroke", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_CategoricalStrokedSeries_Stroke;
                xamlMember.Setter = set_132_CategoricalStrokedSeries_Stroke;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries.StrokeThickness":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_CategoricalStrokedSeries_StrokeThickness;
                xamlMember.Setter = set_133_CategoricalStrokedSeries_StrokeThickness;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeries.ValueBinding":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ValueBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_CategoricalSeries_ValueBinding;
                xamlMember.Setter = set_134_CategoricalSeries_ValueBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeries.CategoryBinding":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "CategoryBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_CategoricalSeries_CategoryBinding;
                xamlMember.Setter = set_135_CategoricalSeries_CategoryBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries.StrokeDashArray":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "StrokeDashArray", "Windows.UI.Xaml.Media.DoubleCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_CategoricalStrokedSeries_StrokeDashArray;
                xamlMember.Setter = set_136_CategoricalStrokedSeries_StrokeDashArray;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries.StrokeLineJoin":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "StrokeLineJoin", "Windows.UI.Xaml.Media.PenLineJoin");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_CategoricalStrokedSeries_StrokeLineJoin;
                xamlMember.Setter = set_137_CategoricalStrokedSeries_StrokeLineJoin;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeries.CombineMode":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "CombineMode", "Telerik.Charting.ChartSeriesCombineMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_138_CategoricalSeries_CombineMode;
                xamlMember.Setter = set_138_CategoricalSeries_CombineMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeries.StackGroupKey":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "StackGroupKey", "Object");
                xamlMember.Getter = get_139_CategoricalSeries_StackGroupKey;
                xamlMember.Setter = set_139_CategoricalSeries_StackGroupKey;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior.ShowIntersectionPoints":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ShowIntersectionPoints", "Boolean");
                xamlMember.Getter = get_140_ChartTrackBallBehavior_ShowIntersectionPoints;
                xamlMember.Setter = set_140_ChartTrackBallBehavior_ShowIntersectionPoints;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior.InfoMode":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "InfoMode", "Telerik.UI.Xaml.Controls.Chart.TrackInfoMode");
                xamlMember.Getter = get_141_ChartTrackBallBehavior_InfoMode;
                xamlMember.Setter = set_141_ChartTrackBallBehavior_InfoMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior.ShowInfo":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ShowInfo", "Boolean");
                xamlMember.Getter = get_142_ChartTrackBallBehavior_ShowInfo;
                xamlMember.Setter = set_142_ChartTrackBallBehavior_ShowInfo;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior.LineStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "LineStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_143_ChartTrackBallBehavior_LineStyle;
                xamlMember.Setter = set_143_ChartTrackBallBehavior_LineStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior.InfoStyle":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "InfoStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_144_ChartTrackBallBehavior_InfoStyle;
                xamlMember.Setter = set_144_ChartTrackBallBehavior_InfoStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior.SnapMode":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "SnapMode", "Telerik.UI.Xaml.Controls.Chart.TrackBallSnapMode");
                xamlMember.Getter = get_145_ChartTrackBallBehavior_SnapMode;
                xamlMember.Setter = set_145_ChartTrackBallBehavior_SnapMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior.TrackInfoTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "TrackInfoTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_146_ChartTrackBallBehavior_TrackInfoTemplate;
                xamlMember.Setter = set_146_ChartTrackBallBehavior_TrackInfoTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior.IntersectionTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartTrackBallBehavior");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IntersectionTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_147_ChartTrackBallBehavior_IntersectionTemplate;
                xamlMember.Setter = set_147_ChartTrackBallBehavior_IntersectionTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding.PropertyName":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "PropertyName", "String");
                xamlMember.Getter = get_148_PropertyNameDataPointBinding_PropertyName;
                xamlMember.Setter = set_148_PropertyNameDataPointBinding_PropertyName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior.PanMode":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "PanMode", "Telerik.UI.Xaml.Controls.Chart.ChartPanZoomMode");
                xamlMember.Getter = get_149_ChartPanAndZoomBehavior_PanMode;
                xamlMember.Setter = set_149_ChartPanAndZoomBehavior_PanMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior.ZoomMode":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "ZoomMode", "Telerik.UI.Xaml.Controls.Chart.ChartPanZoomMode");
                xamlMember.Getter = get_150_ChartPanAndZoomBehavior_ZoomMode;
                xamlMember.Setter = set_150_ChartPanAndZoomBehavior_ZoomMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior.HandleDoubleTap":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPanAndZoomBehavior");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "HandleDoubleTap", "Boolean");
                xamlMember.Getter = get_151_ChartPanAndZoomBehavior_HandleDoubleTap;
                xamlMember.Setter = set_151_ChartPanAndZoomBehavior_HandleDoubleTap;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.HubTileBase.UpdateInterval":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.HubTileBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "UpdateInterval", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_152_HubTileBase_UpdateInterval;
                xamlMember.Setter = set_152_HubTileBase_UpdateInterval;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadCustomHubTile.FrontContent":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadCustomHubTile");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "FrontContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_153_RadCustomHubTile_FrontContent;
                xamlMember.Setter = set_153_RadCustomHubTile_FrontContent;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.HubTileBase.BackContent":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.HubTileBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "BackContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_154_HubTileBase_BackContent;
                xamlMember.Setter = set_154_HubTileBase_BackContent;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.RadCustomHubTile.FrontContentTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.RadCustomHubTile");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "FrontContentTemplate", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_155_RadCustomHubTile_FrontContentTemplate;
                xamlMember.Setter = set_155_RadCustomHubTile_FrontContentTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.HubTileBase.IsFlipped":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.HubTileBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IsFlipped", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_156_HubTileBase_IsFlipped;
                xamlMember.Setter = set_156_HubTileBase_IsFlipped;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.HubTileBase.Command":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.HubTileBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_157_HubTileBase_Command;
                xamlMember.Setter = set_157_HubTileBase_Command;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.HubTileBase.CommandParameter":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.HubTileBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_158_HubTileBase_CommandParameter;
                xamlMember.Setter = set_158_HubTileBase_CommandParameter;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.HubTileBase.Title":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.HubTileBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "Title", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_159_HubTileBase_Title;
                xamlMember.Setter = set_159_HubTileBase_Title;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.HubTileBase.TitleTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.HubTileBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "TitleTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_160_HubTileBase_TitleTemplate;
                xamlMember.Setter = set_160_HubTileBase_TitleTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.HubTileBase.IsFrozen":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.HubTileBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "IsFrozen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_161_HubTileBase_IsFrozen;
                xamlMember.Setter = set_161_HubTileBase_IsFrozen;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.HubTileBase.BackContentTemplate":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.HubTileBase");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "BackContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_162_HubTileBase_BackContentTemplate;
                xamlMember.Setter = set_162_HubTileBase_BackContentTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.HubTileService.GroupTag":
                userType = (global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.HubTileService");
                xamlMember = new global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlMember(this, "GroupTag", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_163_HubTileService_GroupTag;
                xamlMember.Setter = set_163_HubTileService_GroupTag;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlSystemBaseType
    {
        global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Flurrysticks.Flurrystics_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


